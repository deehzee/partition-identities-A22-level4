################################################################
#
# File: A22-L4-iniRules.txt
#
# Author: Debajyoti Nandi
#
# This file contains the replacement rules coming
# from the initial conditions as described in the proofs
# of Chapter 7 (Initial Conditions).
#
################################################################

##################### For the (4,0)-module #####################
#
# rini40a: Coming from f[1].v[0] = 0 in (4,0)-module.
# X[-1].v[0] --> (w0*sqrt(3)/6)*a[-1].v[0]
#
rini40a := [
  2, #length

  proc(m) #find
    if m[-2..] = [X[-1],v[0]] then
      return nops(m)-1;
    end if;
    return 0;
  end proc,
  
  #substt
  m -> [[w0*sqrt(3)/6,[a[-1],v[0]]]]
];

##################### For the (2,1)-module #####################
#
# rini21a: Coming from (f[1]^2).v[0] = 0 in (2,1)-module
# X[-1].X[-1].v[0] --> (-w0*sqrt(3)/6)*X[-2].v[0]
#  + (w0*sqrt(3)/3)*a[-1].X[-1].v[0]
#  + (-w/12)*a[-1].a[-1].v[0]
#
rini21a := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-1],X[-1],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,
  
  #substt
  m -> [[-w0*sqrt(3)/6, [X[-2],v[0]]],
        [w0/sqrt(3), [a[-1],X[-1],v[0]]],
        [-w/12, [a[-1],a[-1],v[0]]]]
];

# rini21b: Coming from (f[0]^3).v[0] = 0 in (2,1)-module.
# X[-2].X[-1].v[0] --> (-w0/sqrt(3))*a[-1].X[-2].v[0]
#              + (w0*sqrt(3)/2)*a[-1].a[-1].X[-1].v[0]
#
rini21b := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-2],X[-1],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,
  
  #substt
  m -> [[-w0/sqrt(3), [a[-1],X[-2],v[0]]],
        [w0*sqrt(3)/2, [a[-1],a[-1],X[-1],v[0]]]]
];

# rini21c: Coming from (f[0]^4).v[0] = 0 in (2,1)-module.
# (X[-2])^2.v[0] --> (-4/3)*X[-3].X[-1].v[0]
#  + (-w0*sqrt(3)/18)*X[-4].v[0] 
#  + (w0*2*sqrt(3)/9)*a[-1].X[-3].v[0]
#  + (-w0*sqrt(3))*(a[-1]^2).X[-2].v[0]
#  + (w0*4/sqrt(3))*(a[-1]^3).X[-1].v[0] + (w/12)*(a[-1]^4).v[0]
#
rini21c := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-2],X[-2],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,

  #substt
  m -> [[-4/3, [X[-3],X[-1],v[0]]], 
        [-w0*sqrt(3)/18, [X[-4],v[0]]],
        [w0*2*sqrt(3)/9, [a[-1],X[-3],v[0]]],
        [-w0*sqrt(3), [a[-1]$2,X[-2],v[0]]],
        [w0*4/sqrt(3), [a[-1]$3,X[-1],v[0]]],
        [w/12, [a[-1]$4,v[0]]]]
];

# rini21d: coming from (f[0]^5).v[0] = 0 in (2,1)-module.
#   Re-write rule for X[-3].X[-2].v[0] ...
#
rini21d := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-3],X[-2],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,

  #substt
  m -> [[-1, [X[-4],X[-1],v[0]]], [1, [a[-1],X[-3],X[-1],v[0]]],
        [-w0*sqrt(3)/6, [a[-1],X[-4],v[0]]],
        [w0/sqrt(3), [a[-1]$2,X[-3],v[0]]],
        [-w0*sqrt(3)/2, [a[-1]$3,X[-2],v[0]]],
        [w0*sqrt(3)/2, [a[-1]$4,X[-1],v[0]]],
        [w/20, [a[-1]$5,v[0]]], [w/30, [a[-5],v[0]]]]
];

# rini21e: Coming from (f[0]^6).v[0] = 0 in (2,1)-module
# Replacement rule for X[-3].X[-3].v[0] --> ...
#  
rini21e := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-3],X[-3],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,

  #substt
  m -> [[2, [X[-5],X[-1],v[0]]], [-w0*sqrt(3)/6, [X[-6],v[0]]],
        [-6, [a[-1],X[-4],X[-1],v[0]]],
        [w0*2/sqrt(3), [a[-1],X[-5],v[0]]],
        [6, [a[-1]$2,X[-3],X[-1],v[0]]],
        [-w0*sqrt(3), [a[-1]$2,X[-4],v[0]]],
        [w0*sqrt(3), [a[-1]$3,X[-3],v[0]]],
        [-w0*3*sqrt(3)/5, [a[-1]$5,X[-1],v[0]]],
        [-w0*sqrt(3)/15, [a[-5],X[-1],v[0]]],
        [-w/6, [a[-5],a[-1],v[0]]]]
];


##################### For the (0,2)-module #####################
#
# rini02a: Coming from f[0].v[0] = 0 in (0,2)-module
# Replacement rule for X[-1].v[0] --> ...
#
rini02a := [
  2, #length
  
  proc(m) #find
    if m[-2..] = [X[-1],v[0]] then
      return nops(m)-1;
    end if;
    return 0;
  end proc,
  
  #substt
  m -> [[-w0/sqrt(3), [a[-1],v[0]]]]
];

# rini02b: Coming from (f[1]^3).v[0] = 0 in (0,2)-module
# Replacement rule for X[-3].v[0] --> ...
#
rini02b := [
  2, #length
  
  proc(m) #find
    if m[-2..] = [X[-3],v[0]] then
      return nops(m)-1;
    end if;
    return 0;
  end proc,
  
  #substt
  m -> [[3/2, [a[-1],X[-2],v[0]]], 
        [w0*sqrt(3)/4, [a[-1]$3,v[0]]]]
];

# rini02c: Coming from (f[1]^4).v[0] = 0 in (0,2)-module
# Replacement rule for (X[-2]^2).v[0] --> ...
rini02c := [
  3, #length
  
  proc(m) #find
    if m[-3..] = [X[-2],X[-2],v[0]] then
      return nops(m)-2;
    end if;
    return 0;
  end proc,

  #substt
  m -> [[-w0*sqrt(3)/2, [X[-4],v[0]]], 
        [w0*sqrt(3), [a[-1]$2,X[-2],v[0]]],
        [w*3/4, [a[-1]$4,v[0]]]]
];

