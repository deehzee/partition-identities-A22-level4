################################################################
#
# File: test.txt
#
# Author: Debajyoti Nandi
#
# The programs here can be used to automate the analysis
# of various deg 2 and 3 relations. Used in the proofs of
# various forbidden partitions.
#
# truncate(L,k): returns a truncated list from L upto k 
#    elements
#
# deg3(n): Uses the 4 relations of degree 3 on the least 4 
#    partitions of n. Returns a row reducede matrix
#    from the coefficients. j-th column corresponds
#    to the the j-th least partition of n into 3 parts.
#
# deg3ex(n): Computes the row reduced matrix in the 
#    calculation of the exceptional triplets. Input should 
#    be of the form n = 3k+1, n >= 13. The j-th column, 
#    1 <= j <= 6, corresponds to the term X(-Lj), 
#    where Lj is the j-th least partition of n into 3 parts. 
#    The j-th column, 7 <= j <= 10, corresponds to the term 
#    X(-Lj)E(1), where Lj is the j-th least partition of 
#    (n+1) into k parts.
#
################################################################

# truncate(L,k): truncates the list L up to length k
truncate := (L,k) -> if k<nops(L) then L[1..k] else L end if;

# deg3(n): presents the row-reduced form of the deg-3 relations
#    upto the term corresponding to the 4th triplet of n.
#
deg3 := proc(n)
  local L, i, r;
  L := truncate(listkPartitions(n,3),4);
  for i from 1 to 4 do
    r[i] := map(c||i, L);
  end do;
  return ReducedRowEchelonForm(Matrix([seq(r[i], i=1..4)]));
end proc;

# deg3ex(n): computes the row-reduced matrix used in the 
#    proof of the exceptional forbidden triplets of n.
#
deg3ex := proc(n) 
  local L1, L2, S1, S2, S3, k, i, x, r;
  
  # We must have: n = 3*k+4, n >= 13
  if n mod 3 <> 1 or n < 13 then
    return FAIL;
  end if;
  
  k := (n-4)/3;
  
  # first 4 rows 
  L1 := truncate(listkPartitions(n,3), 6);
  L2 := truncate(listkPartitions(n+1,3), 4);
  for i from 1 to 4 do
    r[i] := [op(map(c||i, L1)), op(map(-c||i||b, L2))];
  end do;
  
  # 5th row
  S1 := listkPartitions(2*k+1, 2);
  r[5] := [0$10];
  for i from 1 to 6 do
    for x in S1 do
      if L1[i] = sort([k+3, op(x)],`>`) then
        r[5][i] := r[5][i] + c(x);
      end if;
    end do;
  end do;
  S2 := listkPartitions(2*k, 2);
  for i from 1 to 6 do
    for x in S2 do
      if L1[i] = sort([k+4, op(x)],`>`) then
        r[5][i] := r[5][i] - (-6)*cb(x);
      end if;
    end do;
  end do;
  S3 := listkPartitions(2*k+2, 2);
  for i from 1 to 4 do
    for x in S3 do
      if L2[i] = sort([k+3, op(x)],`>`) then
        r[5][6+i] := r[5][6+i] - cb(x);
      end if;
    end do;
  end do;
  
  # 6th-9th rows
  for i from 6 to 9 do
    r[i] := [0$6, op(map(c||(i-5), L2))];
  end do;
  
  #matrix
  return ReducedRowEchelonForm(Matrix([seq(r[i], i=1..9)]));
end proc;

